AWSTemplateFormatVersion: 2010-09-09
Description: Serverless API

Parameters:
  application:
    Default: kalinchih-my-ip
    Type: String

  apiResource:
    Default: my_ip_addresses
    Type: String

  stage:
    Default: dev
    Description: api stage
    Type: String
    MinLength: 1
    MaxLength: 255

  artifactBucket:
    Default: kalinchih-my-ip-artifact
    Type: String

  artifactObjectName:
    Default: my_ip-get_http_request_ip-1.0-SNAPSHOT-jar-with-dependencies.jar
    Type: String

  handler:
    Default: kalinchih.my_ip.MyIpApp::handleRequest
    Type: String

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${application}-lambda-execution_role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub "${artifactBucket}"
        S3Key: !Sub "${artifactObjectName}"
      FunctionName: !Sub "${application}"
      Handler: !Sub "${handler}"
      MemorySize: 128
      Timeout: 15 # seconds
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Runtime: java8

  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - Api
      - LambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:aws:execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref Api
          - /*

  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${application}"
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt
        - Api
        - RootResourceId
      PathPart: !Sub "${apiResource}"

  ApiMethodGet:
    DependsOn: LambdaPermission
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ""
          - - "arn:aws:apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - LambdaFunction
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: !Join
            - ""
            - - |
              - |
                {
              - |
                "xForwardedFor": "$input.params().header.get('X-Forwarded-For')",
                "userAgent": "$input.params().header.get('User-Agent')",
                "authToken": "$input.params().header.get('myip-authtoken')"
              - |
                }
      ResourceId: !Ref ApiResource
      RestApiId: !Ref Api
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiMethodOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref ApiResource
      RestApiId: !Ref Api
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
            StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  ApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - ResourcePath: !Sub "/${apiResource}"
          HttpMethod: GET
          MetricsEnabled: "true"
          ThrottlingBurstLimit: 3
          ThrottlingRateLimit: 3.0
      RestApiId: !Ref Api
      StageName: !Sub "${stage}"

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ApiMethodGet
      - ApiMethodOptions
    Properties:
      Description: !Sub "deployment of stage ${stage}"
      RestApiId:
        Ref: Api
